//
//  ContentViewModel.swift
//  AnimalFacesDetector
//
//  Created by Denis Denisov on 18/7/25.
//

import Foundation
import Observation
import CoreML
import Vision

@Observable
final class ContentViewModel {
    var isCameraShow = false
    var animal = ""
    var isModelLoaded = false
    var errorMessage: String?
    var visionRequest: VNCoreMLRequest?
    
    private var mlModel: AnimalFacesClassifier?
    private var visionModel: VNCoreMLModel?
    
    init() {
        loadModel()
    }
    
    private func loadModel() {
        do {
            let configuration = MLModelConfiguration()
            mlModel = try AnimalFacesClassifier(configuration: configuration)
            
            guard let mlModel = mlModel else {
                errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ML –º–æ–¥–µ–ª—å"
                return
            }
            
            visionModel = try VNCoreMLModel(for: mlModel.model)
            
            guard let visionModel = visionModel else {
                errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VNCoreMLModel"
                return
            }
            
            visionRequest = VNCoreMLRequest(model: visionModel, completionHandler: result)
            visionRequest?.imageCropAndScaleOption = .centerCrop
            
            isModelLoaded = true
            print("‚úÖ CoreML –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: \(error.localizedDescription)"
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:", error)
        }
    }
    
    func showCamera() {
        guard isModelLoaded else {
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return
        }
        isCameraShow.toggle()
    }
    
    private func result(request: VNRequest, error: Error?) {
        if let error = error {
            Task { @MainActor in
                errorMessage = "–û—à–∏–±–∫–∞ Vision: \(error.localizedDescription)"
            }
            print("‚ùå Vision error:", error)
            return
        }
        
        guard let observations = request.results as? [VNClassificationObservation] else {
            Task { @MainActor in
                errorMessage = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            }
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return
        }
        
        guard let best = observations.max(by: { $0.confidence < $1.confidence }) else {
            return
        }
        
        guard best.confidence > 0.5 else {
            Task { @MainActor in
                animal = "–ù–µ —É–≤–µ—Ä–µ–Ω..."
            }
            return
        }
        
        let animalName = {
            switch best.identifier {
            case "cat": "–ö–æ—Ç üê±"
            case "dog": "–°–æ–±–∞–∫–∞ üê∂"
            default: "–î–∏–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ üêæ"
            }
        }()
        
        Task { @MainActor in
            animal = "\(animalName) (\(String(format: "%.0f", best.confidence * 100))%)"
            errorMessage = nil
        }
    }
}
